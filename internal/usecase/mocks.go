// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/mrbelka12000/wallet_calc/internal/entity"
	postgres "github.com/mrbelka12000/wallet_calc/pkg/gorm/postgres"
	gorm "gorm.io/gorm"
)

// MockuserRepository is a mock of userRepository interface.
type MockuserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepositoryMockRecorder
}

// MockuserRepositoryMockRecorder is the mock recorder for MockuserRepository.
type MockuserRepositoryMockRecorder struct {
	mock *MockuserRepository
}

// NewMockuserRepository creates a new mock instance.
func NewMockuserRepository(ctrl *gomock.Controller) *MockuserRepository {
	mock := &MockuserRepository{ctrl: ctrl}
	mock.recorder = &MockuserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepository) EXPECT() *MockuserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockuserRepository) Create(db *gorm.DB, req entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", db, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockuserRepositoryMockRecorder) Create(db, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockuserRepository)(nil).Create), db, req)
}

// Get mocks base method.
func (m *MockuserRepository) Get(db *gorm.DB, req entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", db, req)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockuserRepositoryMockRecorder) Get(db, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockuserRepository)(nil).Get), db, req)
}

// Mockdb is a mock of db interface.
type Mockdb struct {
	ctrl     *gomock.Controller
	recorder *MockdbMockRecorder
}

// MockdbMockRecorder is the mock recorder for Mockdb.
type MockdbMockRecorder struct {
	mock *Mockdb
}

// NewMockdb creates a new mock instance.
func NewMockdb(ctrl *gomock.Controller) *Mockdb {
	mock := &Mockdb{ctrl: ctrl}
	mock.recorder = &MockdbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdb) EXPECT() *MockdbMockRecorder {
	return m.recorder
}

// TxBegin mocks base method.
func (m *Mockdb) TxBegin(ctx context.Context) *postgres.Gorm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxBegin", ctx)
	ret0, _ := ret[0].(*postgres.Gorm)
	return ret0
}

// TxBegin indicates an expected call of TxBegin.
func (mr *MockdbMockRecorder) TxBegin(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxBegin", reflect.TypeOf((*Mockdb)(nil).TxBegin), ctx)
}

// WithCtx mocks base method.
func (m *Mockdb) WithCtx(ctx context.Context) *postgres.Gorm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCtx", ctx)
	ret0, _ := ret[0].(*postgres.Gorm)
	return ret0
}

// WithCtx indicates an expected call of WithCtx.
func (mr *MockdbMockRecorder) WithCtx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCtx", reflect.TypeOf((*Mockdb)(nil).WithCtx), ctx)
}
